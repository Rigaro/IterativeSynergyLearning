%implements s4_b0_3opym_0_Functions "C"

%function AbstractMovingStatistic_stepImp_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
dsp_private_SlidingWindowAver_T *obj_0;
real_T cumRevIndex;
real_T csum;
real_T z;
int32_T i;
/* Start for MATLABSystem: '<S10>/Moving Average' */
obj_0 = obj->pStatistic;
if (obj_0->isInitialized != 1) {
    obj_0->isInitialized = 1;
    obj_0->pCumSum = 0.0;
    for (i = 0; i < 999; i++) {
        obj_0->pCumSumRev[i] = 0.0;
    }
    obj_0->pCumRevIndex = 1.0;
    obj_0->pCumSum = 0.0;
    for (i = 0; i < 999; i++) {
        obj_0->pCumSumRev[i] = 0.0;
    }
    obj_0->pCumRevIndex = 1.0;
}
cumRevIndex = obj_0->pCumRevIndex;
csum = obj_0->pCumSum;
for (i = 0; i < 999; i++) {
    localB->csumrev[i] = obj_0->pCumSumRev[i];
}
csum += u;
z = localB->csumrev[(int32_T)cumRevIndex - 1] + csum;
localB->csumrev[(int32_T)cumRevIndex - 1] = u;
if (cumRevIndex != 999.0) {
    cumRevIndex++;
} else {
    cumRevIndex = 1.0;
    csum = 0.0;
    for (i = 0; i < 998; i++) {
        localB->csumrev[997 - i] += localB->csumrev[998 - i];
    }
}
y = z / 1000.0;
obj_0->pCumSum = csum;
for (i = 0; i < 999; i++) {
    obj_0->pCumSumRev[i] = localB->csumrev[i];
}
obj_0->pCumRevIndex = cumRevIndex;
/* End of Start for MATLABSystem: '<S10>/Moving Average' */
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("AbstractMovingStatistic_stepImp", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "AbstractMovingStatistic_stepImp"))
%<SLibCG_AccessArg(0, 0, 2)>
%endif
%if SLibCG_ArgAccessed(0, 0, 2)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "AbstractMovingStatistic_stepImp", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "AbstractMovingStatistic_stepImp"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 0, 2)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T AbstractMovingStatistic_stepImp(\
%assign comma = ""
%<comma>const dsp_MovingAverage_hmiTest_T *obj\
%assign comma = ", "
%<comma>real_T u\
%assign comma = ", "
%if SLibCG_ArgAccessed(0, 0, 2)
%<comma>%<tSimStructType> * const %<tSimStruct>\
%assign comma = ", "
%endif
%<comma>B_MovingAverage_hmiTest_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%return fcnBuff
%endfunction

