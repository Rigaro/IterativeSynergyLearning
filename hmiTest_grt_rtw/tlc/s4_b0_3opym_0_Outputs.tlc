%implements s4_b0_3opym_0_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
int32_T k;
boolean_T exitg1;
%closefile localVarDecl
%assign _modelSS = ""

/* Start for MATLABSystem: '<S10>/Moving Average' incorporates:
 *  MATLABSystem: '<S10>/Moving Average'
 */
if (localDW->obj.TunablePropsChanged) {
    localDW->obj.TunablePropsChanged = false;
}
k = 0;
exitg1 = false;
while ((!exitg1) && (k < 8)) {
    if (localDW->obj.inputVarSize.f1[k] != 1U) {
        for (k = 0; k < 8; k++) {
            localDW->obj.inputVarSize.f1[k] = 1U;
        }
        exitg1 = true;
    } else {
        k++;
    }
}
/* MATLABSystem: '<S10>/Moving Average' incorporates:
 *  Start for MATLABSystem: '<S10>/Moving Average'
 */
%if SLibCG_FcnCallArgAccessed(0,3,0,0)
%<SLibCG_AccessArg(0 ,3, 3)>
%endif
%if SLibCG_FcnCallArgAccessed(0,3,0,1)
%<SLibCG_AccessArg(0 ,3, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(0,3,0,2)
%<SLibCG_AccessArg(0 ,3, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(0,3,0,3)
%<SLibCG_AccessArg(0 ,3, 2)>
%endif

localB->MovingAverage = %<(SLibCGCallSubFcn("AbstractMovingStatistic_stepImp", ["&localDW->obj", "rtu_0", "%<tSimStruct>", "localB"], 0, 3, 0))>;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 3, 0)>
%endif
%if SLibCG_ArgAccessed(0, 3, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 3, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void hmiTest_MovingAverage(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 3, 0)
%<comma>%<tSimStructType> * const %<tSimStruct>\
%assign comma = ", "
%endif
%if SLibCG_ArgAccessed(0, 3, 1)
%<comma>real_T rtu_0\
%assign comma = ", "
%endif
%<comma>B_MovingAverage_hmiTest_T *localB\
%assign comma = ", "
%<comma>DW_MovingAverage_hmiTest_T *localDW\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%endfunction
