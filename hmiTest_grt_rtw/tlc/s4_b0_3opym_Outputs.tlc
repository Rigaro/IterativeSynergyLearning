%implements s4_b0_3opym_Outputs "C"

%function Outputs(block, system) Output
%<SLibCGIRAccessLocalVar(31, 0)> %% rtb_Sum
%<SLibCGIRAccessLocalVar(7, 0)> %% rtb_TransferFcn1
%<SLibCGIRAccessLocalVar(9, 0)> %% rtb_TransferFcn
%<SLibCGIRAccessLocalVar(19, 0)> %% rtb_TmpSignalConversionAtVRSi_p
%<SLibCGIRAccessLocalVar(14, 0)> %% rtb_y
%<SLibCGIRAccessLocalVar(29, 0)> %% rtb_Transpose1
%<SLibCGIRAccessLocalVar(28, 0)> %% rtb_Product_g
%<SLibCGIRAccessLocalVar(30, 0)> %% rtb_Transpose_l
%<SLibCGIRAccessLocalVar(16, 0)> %% rtb_TmpSignalConversionAtVRSink
%<SLibCGIRAccessLocalVar(17, 0)> %% rtb_Unbuffer6
%<SLibCGIRAccessLocalVar(22, 0)> %% rtb_Unbuffer5
%<SLibCGIRAccessLocalVar(23, 0)> %% rtb_Unbuffer4
%<SLibCGIRAccessLocalVar(26, 0)> %% rtb_Skew
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
static const int8_T a[9] = { 0, 0, 1, 0, 1, 0, -1, 0, 0 };
real_T mT[16];
static const int8_T b[4] = { 0, 0, 0, 1 };
static const real_T a_0[16] = { -6.123233995736766E-17, -6.123233995736766E-17, -1.0, 0.0, 6.123233995736766E-17, -1.0, 6.123233995736766E-17, 0.0, -1.0, -6.123233995736766E-17, 6.123233995736766E-17, 0.0, 0.0, 0.0, 0.0, 1.0 };
real_T rtb_Product[9];
real_T rtb_Unbuffer1[8];
int32_T i;
real_T tmp[16];
real_T tmp_0[16];
real_T a_1[16];
int32_T i_0;
real_T rtb_TmpSignalConversionAtSFun_0;
real_T rtb_TmpSignalConversionAtSFun_1;
real_T rtb_TmpSignalConversionAtSFun_2;
%closefile localVarDecl
%assign _modelSS = ""

%assign tlcOutputsFcnOfS3B2 = OpaqueTLCBlockFcn("Outputs", 3, 2, 1, 2)
%assign tlcOutputsFcnOfS3B3 = OpaqueTLCBlockFcn("Outputs", 3, 3, 1, 2)
%assign tlcOutputsFcnOfS3B5 = OpaqueTLCBlockFcn("Outputs", 3, 5, 1, 2)
%assign tlcOutputsFcnOfS3B7 = OpaqueTLCBlockFcn("Outputs", 3, 7, 1, 2)
%assign tlcOutputsFcnOfS3B9 = OpaqueTLCBlockFcn("Outputs", 3, 9, 1, 2)
%assign tlcOutputsFcnOfS3B12 = OpaqueTLCBlockFcn("Outputs", 3, 12, 1, 2)
%assign tlcOutputsFcnOfS3B13 = OpaqueTLCBlockFcn("Outputs", 3, 13, 1, 2)
%assign tlcOutputsFcnOfS3B14 = OpaqueTLCBlockFcn("Outputs", 3, 14, 1, 2)
%assign tlcOutputsFcnOfS3B15 = OpaqueTLCBlockFcn("Outputs", 3, 15, 1, 2)
%assign tlcOutputsFcnOfS3B16 = OpaqueTLCBlockFcn("Outputs", 3, 16, 1, 2)
%assign tlcOutputsFcnOfS3B18 = OpaqueTLCBlockFcn("Outputs", 3, 18, 1, 2)
%assign tlcOutputsFcnOfS3B19 = OpaqueTLCBlockFcn("Outputs", 3, 19, 1, 2)
%assign tlcOutputsFcnOfS3B22 = OpaqueTLCBlockFcn("Outputs", 3, 22, 1, 2)
if (%<(SLibCGIRIsSampleHit(5, 3))>) {
    /* SignalConversion: '<S1>/TmpSignal ConversionAtVR SinkInport1' */
    rtb_TmpSignalConversionAtVRSink[0] = 0.0;
    rtb_TmpSignalConversionAtVRSink[1] = 0.0;
    rtb_TmpSignalConversionAtVRSink[2] = 0.0;
    rtb_TmpSignalConversionAtVRSink[3] = 0.0;
}
if (%<(SLibCGIRIsSampleHit(4, 3))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS3B2)
    /* S-Function (myo_sfun): '<S8>/Myo S-Function' */
%<tlcOutputsFcnOfS3B2>\
%endif
    /* Unbuffer: '<S12>/Unbuffer6' */
    memcpy(&hmiTest_DW.Unbuffer6_CircBuff[0], &hmiTest_B.MyoSFunction_o1[0], sizeof(real_T) << 3U);
    hmiTest_DW.Unbuffer6_memIdx = 0;
}
/* Unbuffer: '<S12>/Unbuffer6' */
if (%<(SLibCGIRIsSampleHit(3, 3))>) {
    rtb_Unbuffer6[0] = hmiTest_DW.Unbuffer6_CircBuff[hmiTest_DW.Unbuffer6_memIdx];
    rtb_Unbuffer6[1] = hmiTest_DW.Unbuffer6_CircBuff[2 + hmiTest_DW.Unbuffer6_memIdx];
    rtb_Unbuffer6[2] = hmiTest_DW.Unbuffer6_CircBuff[4 + hmiTest_DW.Unbuffer6_memIdx];
    rtb_Unbuffer6[3] = hmiTest_DW.Unbuffer6_CircBuff[6 + hmiTest_DW.Unbuffer6_memIdx];
    if (hmiTest_DW.Unbuffer6_memIdx < 1) {
        hmiTest_DW.Unbuffer6_memIdx++;
    }
%if !WHITE_SPACE(tlcOutputsFcnOfS3B3)
    /* MATLABFcn: '<S17>/ketbra' */
%<tlcOutputsFcnOfS3B3>\
%endif
    /* Product: '<S17>/Product' incorporates:
 *  Constant: '<S17>/two'
 */
    for (i = 0; i < 9; i++) {
        rtb_Product[i] = rtb_Skew[i] * hmiTest_P.two_Value;
    }
    /* End of Product: '<S17>/Product' */
%if !WHITE_SPACE(tlcOutputsFcnOfS3B5)

    /* MATLABFcn: '<S17>/Skew' */
%<tlcOutputsFcnOfS3B5>\
%endif
    /* Product: '<S17>/Product1' incorporates:
 *  Constant: '<S17>/two'
 *  DotProduct: '<S17>/Dot Product'
 */
    rtb_TmpSignalConversionAtSFun_0 = ((rtb_Unbuffer6[1] * rtb_Unbuffer6[1] + rtb_Unbuffer6[2] * rtb_Unbuffer6[2]) + rtb_Unbuffer6[3] * rtb_Unbuffer6[3]) * hmiTest_P.two_Value;
    /* Product: '<S17>/Product2' incorporates:
 *  Constant: '<S17>/two'
 */
    rtb_TmpSignalConversionAtSFun_1 = hmiTest_P.two_Value * rtb_Unbuffer6[0];
    /* Sum: '<S17>/Add' incorporates:
 *  Constant: '<S17>/Identity'
 *  Product: '<S17>/Product1'
 *  Product: '<S17>/Product2'
 */
    for (i = 0; i < 9; i++) {
        rtb_Product[i] = ((hmiTest_P.Identity_Value[i] + rtb_Product[i]) - rtb_TmpSignalConversionAtSFun_0 * hmiTest_P.Identity_Value[i]) + rtb_TmpSignalConversionAtSFun_1 * rtb_Skew[i];
    }
    /* End of Sum: '<S17>/Add' */

    /* MATLAB Function: '<S8>/xrotation' */
    /* MATLAB Function 'Human/HMI/xrotation': '<S13>:1' */
    /* '<S13>:1:3' */
    for (i = 0; i < 3; i++) {
        for (i_0 = 0; i_0 < 3; i_0++) {
            rtb_y[i_0 + 3 * i] = 0.0;
            rtb_y[i_0 + 3 * i] += rtb_Product[3 * i] * (real_T)a[i_0];
            rtb_y[i_0 + 3 * i] += rtb_Product[3 * i + 1] * (real_T)a[i_0 + 3];
            rtb_y[i_0 + 3 * i] += rtb_Product[3 * i + 2] * (real_T)a[i_0 + 6];
        }
    }
    /* End of MATLAB Function: '<S8>/xrotation' */
%if !WHITE_SPACE(tlcOutputsFcnOfS3B7)

    /* MATLABFcn: '<S1>/Interpreted MATLAB Function' */
%<tlcOutputsFcnOfS3B7>\
%endif
    /* Gain: '<S1>/Gain' */
    hmiTest_B.Gain = hmiTest_P.Gain_Gain * hmiTest_B.InterpretedMATLABFunction[1];
    /* SignalConversion: '<S3>/TmpSignal ConversionAt SFunction Inport1' incorporates:
 *  MATLAB Function: '<S1>/MATLAB Function'
 *  Product: '<S1>/Product'
 *  Product: '<S1>/Product1'
 *  Product: '<S1>/Product2'
 */
    rtb_TmpSignalConversionAtSFun_0 = hmiTest_B.InterpretedMATLABFunction[0] * hmiTest_B.InterpretedMATLABFunction[3];
    rtb_TmpSignalConversionAtSFun_1 = hmiTest_B.Gain * hmiTest_B.InterpretedMATLABFunction[3];
    rtb_TmpSignalConversionAtSFun_2 = hmiTest_B.InterpretedMATLABFunction[2] * hmiTest_B.InterpretedMATLABFunction[3];
    /* MATLAB Function: '<S1>/MATLAB Function' */
    /* MATLAB Function 'GUI/MATLAB Function': '<S3>:1' */
    /* '<S3>:1:12' */
    /*  Shoulder location offset transformation */
    /*  %<"\% Shoulder abduction/adduction"> */
    /* '<S3>:1:7' */
    /*    T Creates transformation matrix for a given DH parameters. */
    /*    @param aplha MDH 'alpha' parameter. */
    /*    @param a MDH 'a' parameter. */
    /*    @param d MDH 'd' parameter. */
    /*    @param theta MDH 'theta' parameter. */
    /*  %<"\% Shoulder flexion/extension"> */
    /* '<S3>:1:9' */
    /*    T Creates transformation matrix for a given DH parameters. */
    /*    @param aplha MDH 'alpha' parameter. */
    /*    @param a MDH 'a' parameter. */
    /*    @param d MDH 'd' parameter. */
    /*    @param theta MDH 'theta' parameter. */
    /*  %<"\% Shoulder rotation"> */
    /* '<S3>:1:11' */
    /*    T Creates transformation matrix for a given DH parameters. */
    /*    @param aplha MDH 'alpha' parameter. */
    /*    @param a MDH 'a' parameter. */
    /*    @param d MDH 'd' parameter. */
    /*    @param theta MDH 'theta' parameter. */
    /* '<S3>:1:12' */
    tmp[0] = cos(rtb_TmpSignalConversionAtSFun_0);
    tmp[4] = -sin(rtb_TmpSignalConversionAtSFun_0);
    tmp[8] = 0.0;
    tmp[12] = 0.0;
    tmp[1] = sin(rtb_TmpSignalConversionAtSFun_0);
    tmp[5] = cos(rtb_TmpSignalConversionAtSFun_0);
    tmp[9] = -0.0;
    tmp[13] = -0.0;
    tmp[2] = sin(rtb_TmpSignalConversionAtSFun_0) * 0.0;
    tmp[6] = cos(rtb_TmpSignalConversionAtSFun_0) * 0.0;
    tmp[10] = 1.0;
    tmp[14] = 0.0;
    tmp[3] = 0.0;
    tmp[7] = 0.0;
    tmp[11] = 0.0;
    tmp[15] = 1.0;
    tmp_0[0] = cos(rtb_TmpSignalConversionAtSFun_1 - 1.5707963267948966);
    tmp_0[4] = -sin(rtb_TmpSignalConversionAtSFun_1 - 1.5707963267948966);
    tmp_0[8] = 0.0;
    tmp_0[12] = 0.0;
    tmp_0[1] = sin(rtb_TmpSignalConversionAtSFun_1 - 1.5707963267948966) * 6.123233995736766E-17;
    tmp_0[5] = cos(rtb_TmpSignalConversionAtSFun_1 - 1.5707963267948966) * 6.123233995736766E-17;
    tmp_0[9] = 1.0;
    tmp_0[13] = 0.0;
    tmp_0[2] = -sin(rtb_TmpSignalConversionAtSFun_1 - 1.5707963267948966);
    tmp_0[6] = -cos(rtb_TmpSignalConversionAtSFun_1 - 1.5707963267948966);
    tmp_0[10] = 6.123233995736766E-17;
    tmp_0[14] = 0.0;
    for (i = 0; i < 4; i++) {
        for (i_0 = 0; i_0 < 4; i_0++) {
            mT[i + (i_0 << 2)] = 0.0;
            mT[i + (i_0 << 2)] += tmp[i_0 << 2] * a_0[i];
            mT[i + (i_0 << 2)] += tmp[(i_0 << 2) + 1] * a_0[i + 4];
            mT[i + (i_0 << 2)] += tmp[(i_0 << 2) + 2] * a_0[i + 8];
            mT[i + (i_0 << 2)] += tmp[(i_0 << 2) + 3] * a_0[i + 12];
        }
        tmp_0[3 + (i << 2)] = b[i];
    }
    tmp[0] = cos(rtb_TmpSignalConversionAtSFun_2);
    tmp[4] = -sin(rtb_TmpSignalConversionAtSFun_2);
    tmp[8] = 0.0;
    tmp[12] = 0.0;
    tmp[1] = sin(rtb_TmpSignalConversionAtSFun_2) * 6.123233995736766E-17;
    tmp[5] = cos(rtb_TmpSignalConversionAtSFun_2) * 6.123233995736766E-17;
    tmp[9] = 1.0;
    tmp[13] = 0.31;
    tmp[2] = -sin(rtb_TmpSignalConversionAtSFun_2);
    tmp[6] = -cos(rtb_TmpSignalConversionAtSFun_2);
    tmp[10] = 6.123233995736766E-17;
    tmp[14] = 1.8982025386783976E-17;
    for (i = 0; i < 4; i++) {
        for (i_0 = 0; i_0 < 4; i_0++) {
            a_1[i + (i_0 << 2)] = 0.0;
            a_1[i + (i_0 << 2)] += tmp_0[i_0 << 2] * mT[i];
            a_1[i + (i_0 << 2)] += tmp_0[(i_0 << 2) + 1] * mT[i + 4];
            a_1[i + (i_0 << 2)] += tmp_0[(i_0 << 2) + 2] * mT[i + 8];
            a_1[i + (i_0 << 2)] += tmp_0[(i_0 << 2) + 3] * mT[i + 12];
        }
        tmp[3 + (i << 2)] = b[i];
    }
    for (i = 0; i < 4; i++) {
        for (i_0 = 0; i_0 < 4; i_0++) {
            mT[i_0 + (i << 2)] = 0.0;
            mT[i_0 + (i << 2)] += tmp[i << 2] * a_1[i_0];
            mT[i_0 + (i << 2)] += tmp[(i << 2) + 1] * a_1[i_0 + 4];
            mT[i_0 + (i << 2)] += tmp[(i << 2) + 2] * a_1[i_0 + 8];
            mT[i_0 + (i << 2)] += tmp[(i << 2) + 3] * a_1[i_0 + 12];
        }
    }
    /* Assignment: '<S5>/Assignment' incorporates:
 *  Constant: '<S7>/Constant'
 *  MATLAB Function: '<S1>/MATLAB Function'
 */
    /* '<S3>:1:13' */
    hmiTest_B.Assignment[0] = hmiTest_P.Constant_Value[0];
    hmiTest_B.Assignment[1] = hmiTest_P.Constant_Value[1];
    hmiTest_B.Assignment[2] = hmiTest_P.Constant_Value[2];
    hmiTest_B.Assignment[0] = mT[12];
    hmiTest_B.Assignment[1] = mT[14];
    hmiTest_B.Assignment[2] = mT[13];
}
if (%<(SLibCGIRIsSampleHit(5, 3))>) {
    /* SignalConversion: '<S1>/TmpSignal ConversionAtVR SinkInport3' */
    rtb_TmpSignalConversionAtVRSi_p[0] = hmiTest_B.InterpretedMATLABFunction[0];
    rtb_TmpSignalConversionAtVRSi_p[1] = hmiTest_B.InterpretedMATLABFunction[2];
    rtb_TmpSignalConversionAtVRSi_p[2] = hmiTest_B.Gain;
    rtb_TmpSignalConversionAtVRSi_p[3] = hmiTest_B.InterpretedMATLABFunction[3];
%if !WHITE_SPACE(tlcOutputsFcnOfS3B9)
    /* S-Function (vrsfunc): '<S1>/VR Sink' */
%<tlcOutputsFcnOfS3B9>\
%endif
}
/* TransferFcn: '<S10>/Transfer Fcn1' */
rtb_TransferFcn1 = 0.0;
rtb_TransferFcn1 += hmiTest_P.TransferFcn1_C * hmiTest_X.TransferFcn1_CSTATE;
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[1], "Output",0)
%if SLibCG_SystemFcnArgAccessed("hmiTest_MovingAverage",1,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif
%if SLibCG_SystemFcnArgAccessed("hmiTest_MovingAverage",1,1)
%<SLibCGIRAccessLocalVar(7, 0)> %% rtb_TransferFcn1
%endif

%<SLibCGIRGenReusableSysCall("hmiTest_MovingAverage", ["%<_modelSS>", "rtb_TransferFcn1", "&hmiTest_B.MovingAverage1", "&hmiTest_DW.MovingAverage1"], 1, 1, 7, 0, 7, 3)>\


%endif
/* Gain: '<S10>/Gain2' */
rtb_TmpSignalConversionAtSFun_0 = hmiTest_P.Gain2_Gain * hmiTest_B.MovingAverage1.MovingAverage;
/* TransferFcn: '<S10>/Transfer Fcn' */
rtb_TransferFcn = 0.0;
rtb_TransferFcn += hmiTest_P.TransferFcn_C * hmiTest_X.TransferFcn_CSTATE;
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[1], "Output",0)
%if SLibCG_SystemFcnArgAccessed("hmiTest_MovingAverage",1,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif
%if SLibCG_SystemFcnArgAccessed("hmiTest_MovingAverage",1,1)
%<SLibCGIRAccessLocalVar(9, 0)> %% rtb_TransferFcn
%endif

%<SLibCGIRGenReusableSysCall("hmiTest_MovingAverage", ["%<_modelSS>", "rtb_TransferFcn", "&hmiTest_B.MovingAverage", "&hmiTest_DW.MovingAverage"], 1, 0, 7, 0, 7, 3)>\


%endif
/* Sum: '<S10>/Sum' incorporates:
 *  Gain: '<S10>/Gain1'
 */
rtb_TmpSignalConversionAtSFun_0 = hmiTest_P.Gain1_Gain * hmiTest_B.MovingAverage.MovingAverage - rtb_TmpSignalConversionAtSFun_0;
/* DeadZone: '<S10>/Dead Zone' */
if (rtb_TmpSignalConversionAtSFun_0 > hmiTest_P.DeadZone_End) {
    rtb_TmpSignalConversionAtSFun_0 -= hmiTest_P.DeadZone_End;
} else if (rtb_TmpSignalConversionAtSFun_0 >= hmiTest_P.DeadZone_Start) {
    rtb_TmpSignalConversionAtSFun_0 = 0.0;
} else {
    rtb_TmpSignalConversionAtSFun_0 -= hmiTest_P.DeadZone_Start;
}
/* End of DeadZone: '<S10>/Dead Zone' */

/* Saturate: '<S10>/Saturation' */
if (rtb_TmpSignalConversionAtSFun_0 > hmiTest_P.Saturation_UpperSat) {
    hmiTest_B.Saturation = hmiTest_P.Saturation_UpperSat;
} else if (rtb_TmpSignalConversionAtSFun_0 < hmiTest_P.Saturation_LowerSat) {
    hmiTest_B.Saturation = hmiTest_P.Saturation_LowerSat;
} else {
    hmiTest_B.Saturation = rtb_TmpSignalConversionAtSFun_0;
}
/* End of Saturate: '<S10>/Saturation' */
if (%<(SLibCGIRIsSampleHit(1, 3))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS3B12)
    /* Scope: '<S10>/Scope' */
%<tlcOutputsFcnOfS3B12>\
%endif
}
/* Unbuffer: '<S11>/Unbuffer1' */
if (%<(SLibCGIRIsSampleHit(4, 3))>) {
    memcpy(&hmiTest_DW.Unbuffer1_CircBuff[0], &hmiTest_B.MyoSFunction_o7[0], sizeof(real_T) << 6U);
    hmiTest_DW.Unbuffer1_memIdx = 0;
}
if (%<(SLibCGIRIsSampleHit(1, 3))>) {
    for (i = 0; i < 8; i++) {
        rtb_Unbuffer1[i] = hmiTest_DW.Unbuffer1_CircBuff[(i << 3) + hmiTest_DW.Unbuffer1_memIdx];
    }
    if (hmiTest_DW.Unbuffer1_memIdx < 7) {
        hmiTest_DW.Unbuffer1_memIdx++;
    }
    /* Gain: '<S11>/Gain' */
    for (i = 0; i < 8; i++) {
        rtb_Unbuffer1[i] *= hmiTest_P.Gain_Gain_n;
    }
    /* End of Gain: '<S11>/Gain' */

    /* Abs: '<S10>/Abs' */
    hmiTest_B.Abs = fabs(rtb_Unbuffer1[0]);
    /* Abs: '<S10>/Abs1' */
    hmiTest_B.Abs1 = fabs(rtb_Unbuffer1[4]);
}
/* End of Unbuffer: '<S11>/Unbuffer1' */

/* Unbuffer: '<S12>/Unbuffer5' */
if (%<(SLibCGIRIsSampleHit(4, 3))>) {
    for (i = 0; i < 6; i++) {
        hmiTest_DW.Unbuffer5_CircBuff[i] = hmiTest_B.MyoSFunction_o2[i];
    }
    hmiTest_DW.Unbuffer5_memIdx = 0;
}
if (%<(SLibCGIRIsSampleHit(3, 3))>) {
    rtb_Unbuffer5[0] = hmiTest_DW.Unbuffer5_CircBuff[hmiTest_DW.Unbuffer5_memIdx];
    rtb_Unbuffer5[1] = hmiTest_DW.Unbuffer5_CircBuff[2 + hmiTest_DW.Unbuffer5_memIdx];
    rtb_Unbuffer5[2] = hmiTest_DW.Unbuffer5_CircBuff[4 + hmiTest_DW.Unbuffer5_memIdx];
    if (hmiTest_DW.Unbuffer5_memIdx < 1) {
        hmiTest_DW.Unbuffer5_memIdx++;
    }
%if !WHITE_SPACE(tlcOutputsFcnOfS3B13)
    /* MATLABFcn: '<S15>/Transpose1' */
%<tlcOutputsFcnOfS3B13>\
%endif
    /* Product: '<S15>/Product' */
    for (i = 0; i < 3; i++) {
        rtb_Transpose1[i] = 0.0;
        rtb_Transpose1[i] += rtb_Product[i] * rtb_Product_g[0];
        rtb_Transpose1[i] += rtb_Product[i + 3] * rtb_Product_g[1];
        rtb_Transpose1[i] += rtb_Product[i + 6] * rtb_Product_g[2];
    }
    /* End of Product: '<S15>/Product' */
%if !WHITE_SPACE(tlcOutputsFcnOfS3B14)

    /* MATLABFcn: '<S15>/Transpose' */
%<tlcOutputsFcnOfS3B14>\
%endif
}
/* End of Unbuffer: '<S12>/Unbuffer5' */

/* Unbuffer: '<S12>/Unbuffer4' */
if (%<(SLibCGIRIsSampleHit(4, 3))>) {
    for (i = 0; i < 6; i++) {
        hmiTest_DW.Unbuffer4_CircBuff[i] = hmiTest_B.MyoSFunction_o3[i];
    }
    hmiTest_DW.Unbuffer4_memIdx = 0;
}
if (%<(SLibCGIRIsSampleHit(3, 3))>) {
    rtb_Unbuffer4[0] = hmiTest_DW.Unbuffer4_CircBuff[hmiTest_DW.Unbuffer4_memIdx];
    rtb_Unbuffer4[1] = hmiTest_DW.Unbuffer4_CircBuff[2 + hmiTest_DW.Unbuffer4_memIdx];
    rtb_Unbuffer4[2] = hmiTest_DW.Unbuffer4_CircBuff[4 + hmiTest_DW.Unbuffer4_memIdx];
    if (hmiTest_DW.Unbuffer4_memIdx < 1) {
        hmiTest_DW.Unbuffer4_memIdx++;
    }
%if !WHITE_SPACE(tlcOutputsFcnOfS3B15)
    /* MATLABFcn: '<S16>/Transpose1' */
%<tlcOutputsFcnOfS3B15>\
%endif
    /* Product: '<S16>/Product' */
    for (i = 0; i < 3; i++) {
        rtb_Product_g[i] = 0.0;
        rtb_Product_g[i] += rtb_Product[i] * rtb_Transpose1[0];
        rtb_Product_g[i] += rtb_Product[i + 3] * rtb_Transpose1[1];
        rtb_Product_g[i] += rtb_Product[i + 6] * rtb_Transpose1[2];
    }
    /* End of Product: '<S16>/Product' */
%if !WHITE_SPACE(tlcOutputsFcnOfS3B16)

    /* MATLABFcn: '<S16>/Transpose' */
%<tlcOutputsFcnOfS3B16>\
%endif
}
/* End of Unbuffer: '<S12>/Unbuffer4' */
if (%<(SLibCGIRIsSampleHit(1, 3))>) {
    /* Product: '<S9>/Product' incorporates:
 *  Constant: '<S9>/Constant'
 *  SignalConversion: '<S9>/TmpSignal ConversionAtProductInport1'
 */
    for (i = 0; i < 3; i++) {
        rtb_Transpose_l[i] = 0.0;
        rtb_Transpose_l[i] += 0.0 * hmiTest_P.Constant_Value_o[0];
        rtb_Transpose_l[i] += 0.0 * hmiTest_P.Constant_Value_o[1];
        rtb_Transpose_l[i] += 0.0 * hmiTest_P.Constant_Value_o[2];
    }
    /* End of Product: '<S9>/Product' */
%if !WHITE_SPACE(tlcOutputsFcnOfS3B18)

    /* MATLABFcn: '<S9>/Transpose' */
%<tlcOutputsFcnOfS3B18>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS3B19)
    /* MATLABFcn: '<S9>/arctangent' */
%<tlcOutputsFcnOfS3B19>\
%endif
    /* Sum: '<S9>/Sum' incorporates:
 *  Constant: '<S9>/offset'
 */
    rtb_Sum = hmiTest_P.offset_Value - rtb_Sum;
    /* Unit Conversion - from: deg to: rad
 Expression: output = (0.0174533*input) + (0) */
}
if (%<(SLibCGIRIsSampleHit(2, 3))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS3B22)
    /* S-Function (sldrtsync): '<Root>/Real-Time Synchronization' */
%<tlcOutputsFcnOfS3B22>\
%endif
}
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 2, fcnProtoType)>
%endfunction
